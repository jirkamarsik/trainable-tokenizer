start = FIND_SPLITS_JOINS_BREAKS;

define {
  SENTENCE_ENDING_MARKER [.?!:;'"\n]
  SENTENCE_BEGINNING_MARKER [|]
  JOIN_HEAD_1 [:digit:]
  JOIN_TAIL_1 [:digit:]
  JOIN_HEAD_2 [:digit:]
  JOIN_TAIL_2 ,\P{White_Space}*[:digit:]
  SPLIT_HEAD_1 are|ca|could|did|does|do|had|has|is|must|need|should|was|were|wo|would
  SPLIT_TAIL_1 n't
  SPLIT_HEAD_2 [:digit:]
  SPLIT_TAIL_2 [$]
  SPLIT_HEAD_3 [:alnum:]
  SPLIT_TAIL_3 [,.;&:?!]
  SPLIT_HEAD_4 [,.;&:?!]
  SPLIT_TAIL_4 [:alnum:]
  XML_NAME_START_CHAR ":"|[A-Z]|"_"|[a-z]|[\UC0-\UD6]|[\UD8-\UF6]|[\UF8-\U2FF]|[\U370-\U37D]|[\U37F-\U1FFF]|[\U200C-\U200D]|[\U2070-\U218F]|[\U2C00-\U2FEF]|[\U3001-\UD7FF]|[\UF900-\UFDCF]|[\UFDF0-\UFFFD]|[\U10000-\UEFFFF]
  XML_NAME_CHAR {XML_NAME_START_CHAR}|"-"|"."|[0-9]|\UB7|[\U0300-\U036F]|[\U203F-\U2040]
  XML_NAME {XML_NAME_START_CHAR}{XML_NAME_CHAR}*
}

token {
  TOKEN_PIECE;
  MAY_BREAK_SENTENCE;
  MAY_SPLIT;
  MAY_JOIN;
  WHITESPACE;
  LINE_BREAK;
  PARAGRAPH_BREAK;
}

header {
#define flush_accumulator() if (self.accumulator_size > 0)\
			    {\
			    	self_accumulator_flush(QUEX_TKN_TOKEN_PIECE);\
				self.accumulator_size = 0;\
			    }

#define send_whitespace() if (self.ws_newlines == 0)\
				self_send(QUEX_TKN_WHITESPACE);\
			  else if (self.ws_newlines == 1)\
				self_send(QUEX_TKN_LINE_BREAK);\
			  else\
				self_send(QUEX_TKN_PARAGRAPH_BREAK);\
			  self.ws_newlines = -1;
}

body {
int ws_newlines, accumulator_size;
}

init {
  self.ws_newlines = -1;
  self.accumulator_size = 0;
}

mode ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_BREAKS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_SPLITS_JOINS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_SPLITS_BREAKS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_BREAKS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_BREAKS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_BREAKS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_JOINS_BREAKS {
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_BREAKS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_FIND_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_SPLITS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << ENTITY_MODE_FIND_JOINS_BREAKS; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_JOINS {
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_FIND_BREAKS {
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << ENTITY_MODE_READ_ENTITY; }
  <<FAIL>>					{ self.undo();
  						  self << ENTITY_MODE_READ_ENTITY; }
}

mode ENTITY_MODE_READ_ENTITY {
  &{XML_NAME};					{ self_send1(QUEX_TKN_TOKEN_PIECE, Lexeme);
						  self << FIND_SPLITS_JOINS_BREAKS; }
}

mode FIND_SPLITS_JOINS_BREAKS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_SPLITS_BREAKS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_SPLITS_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_SPLITS_JOINS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_SPLITS_JOINS; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
						  {
							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_SPLITS_JOINS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_SPLITS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_SPLITS; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_SPLITS_BREAKS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_BREAKS; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_BREAKS; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_BREAKS; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_SPLITS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_SPLITS; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
						  {
							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_JOINS_BREAKS {
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_BREAKS; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << FIND_BREAKS; }
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_JOINS; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << FIND_JOINS; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
						  {
							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_SPLITS {
  {SPLIT_HEAD_1}/{SPLIT_TAIL_1}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << READ_ON; }
  {SPLIT_HEAD_2}/{SPLIT_TAIL_2}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << READ_ON; }
  {SPLIT_HEAD_3}/{SPLIT_TAIL_3}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << READ_ON; }
  {SPLIT_HEAD_4}/{SPLIT_TAIL_4}/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_SPLIT);
						  self.undo();
						  self << FIND_JOINS_BREAKS; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_JOINS {
  {JOIN_HEAD_1}/\P{White_Space}+{JOIN_TAIL_1}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << READ_ON; }
  {JOIN_HEAD_2}/\P{White_Space}+{JOIN_TAIL_2}/	{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_JOIN);
						  self.undo();
						  self << READ_ON; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode FIND_BREAKS {
  {SENTENCE_ENDING_MARKER}/.|\n/		{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << READ_ON; }
  {SENTENCE_BEGINNING_MARKER}			{ flush_accumulator();
						  self_send(QUEX_TKN_MAY_BREAK_SENTENCE);
						  self.undo();
						  self << READ_ON; }
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}

mode READ_ON {
  &/{XML_NAME};					{ flush_accumulator();
  						  self.undo();
						  self << ENTITY_MODE_FIND_SPLITS_JOINS_BREAKS; }
  [:inverse(\P{White_Space}):]			{ if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
						  self_accumulator_add_character(*LexemeBegin);
						  self.accumulator_size++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \n						{ if (self.ws_newlines == -1)
  						  {
						  	flush_accumulator();
  							self.ws_newlines = 1;
						  }
						  else
						  	self.ws_newlines++;
						  self << FIND_SPLITS_JOINS_BREAKS; }
  \P{White_Space}				{ if (self.ws_newlines == -1)
  						  {
  							flush_accumulator();
							self.ws_newlines = 0;
						  }
						  self << FIND_SPLITS_JOINS_BREAKS; }
  <<EOF>>					{ flush_accumulator();
  						  if (self.ws_newlines != -1)
  						  {
  							send_whitespace();
						  }
  				  		  self_send(QUEX_TKN_TERMINATION); }
}
