token {
	TEXT;
	ENTITY;
	XML;
}

define {
	XML_NAME_START_CHAR ":"|[A-Z]|"_"|[a-z]|[\UC0-\UD6]|[\UD8-\UF6]|[\UF8-\U2FF]|[\U370-\U37D]|[\U37F-\U1FFF]|[\U200C-\U200D]|[\U2070-\U218F]|[\U2C00-\U2FEF]|[\U3001-\UD7FF]|[\UF900-\UFDCF]|[\UFDF0-\UFFFD]|[\U10000-\UEFFFF]
	XML_NAME_CHAR {XML_NAME_START_CHAR}|"-"|"."|[0-9]|\UB7|[\U0300-\U036F]|[\U203F-\U2040]
	XML_NAME {XML_NAME_START_CHAR}{XML_NAME_CHAR}*
	ENTITY &{XML_NAME};
	CHARREF &#[0-9]+;|&#x[0-9a-fA-F]+;
	XML_ATTRIBUTE_VALUE \"([^<&"]|{ENTITY}|{CHARREF})*\"|'([^<&']|{ENTITY}|{CHARREF})*'
	XML_ATTRIBUTE {XML_NAME}={XML_ATTRIBUTE_VALUE}
	XML_TAG_CONTENTS {XML_NAME}(\P{White_Space}+{XML_ATTRIBUTE})*
	XML_START_TAG <{XML_TAG_CONTENTS}>
	XML_END_TAG <\/{XML_TAG_CONTENTS}>
	XML_EMPTY_TAG <{XML_TAG_CONTENTS}\/>
	XML_DECLARATION <\?{XML_TAG_CONTENTS}\?>
	XML_TAG {XML_START_TAG}|{XML_END_TAG}|{XML_EMPTY_TAG}
	XML_COMMENT <!--(.|\n)*-->
	XML {XML_COMMENT}|{XML_TAG}|{XML_DECLARATION}
}

header {
#include "configuration.hpp"

#define flush_accumulator_withxml() {\
					self_accumulator_flush(QUEX_PREPROC_WITHXML_TEXT);\
					self.accumulator_size = 0;\
				  }
}

body {
	int accumulator_size, nonblanks_read;
	bool expand_entities;
}

init {
	self.accumulator_size = 0;
	self.nonblanks_read = 0;
	self.expand_entities = false;
}

mode PREPROCESS {
	\P{White_Space}+			{ if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY)
							flush_accumulator_withxml();
						  self_accumulator_add(Lexeme, LexemeEnd);
						  self.accumulator_size += LexemeL; }
	[:inverse(\P{White_Space},[&<]):]+	{ if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY)
							flush_accumulator_withxml();
						  self_accumulator_add(Lexeme, LexemeEnd);
						  self.accumulator_size += LexemeL;
						  self.nonblanks_read += LexemeL; }
	[:inverse(\P{White_Space}):]		{ if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY)
							flush_accumulator_withxml();
						  self_accumulator_add(Lexeme, LexemeEnd);
						  self.accumulator_size += LexemeL;
						  self.nonblanks_read += LexemeL; }
	({ENTITY})|({CHARREF})			{ if (self.expand_entities) {
							if (self.accumulator_size > 0)
								flush_accumulator_withxml();
							self.token_p()->set_number(self.nonblanks_read);
							self_send1(QUEX_PREPROC_WITHXML_ENTITY, Lexeme);
							self.nonblanks_read++; }
						  else {
						  	if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY)
								flush_accumulator_withxml();
							self_accumulator_add(Lexeme, LexemeEnd);
							self.accumulator_size += LexemeL;
							self.nonblanks_read += LexemeL; } }
	{XML}					{ if (self.accumulator_size > 0)
							flush_accumulator_withxml();
						  self.token_p()->set_number(self.nonblanks_read);
						  self_send1(QUEX_PREPROC_WITHXML_XML, Lexeme); }
	<<EOF>>					{ if (self.accumulator_size > 0)
							flush_accumulator_withxml();
						  self_send(QUEX_PREPROC_WITHXML_TERMINATION); }
}
