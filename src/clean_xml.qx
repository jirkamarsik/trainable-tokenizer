token {
    TEXT;
    ENTITY;
    XML;
}

define {
  XML_NAME_START_CHAR ":"|[A-Z]|"_"|[a-z]|[\UC0-\UD6]|[\UD8-\UF6]|[\UF8-\U2FF]|[\U370-\U37D]|[\U37F-\U1FFF]|[\U200C-\U200D]|[\U2070-\U218F]|[\U2C00-\U2FEF]|[\U3001-\UD7FF]|[\UF900-\UFDCF]|[\UFDF0-\UFFFD]|[\U10000-\UEFFFF]
  XML_NAME_CHAR {XML_NAME_START_CHAR}|"-"|"."|[0-9]|\UB7|[\U0300-\U036F]|[\U203F-\U2040]
  XML_NAME {XML_NAME_START_CHAR}{XML_NAME_CHAR}*
  ENTITY &{XML_NAME};
  CHARREF &#[0-9]+;|&#x[0-9a-fA-F]+;
  XML_ATTRIBUTE_VALUE \"([^<&"]|{ENTITY}|{CHARREF})*\"|'([^<&']|{ENTITY}|{CHARREF})*'
  XML_ATTRIBUTE {XML_NAME}={XML_ATTRIBUTE_VALUE}
  XML_TAG_CONTENTS {XML_NAME}(\P{White_Space}+{XML_ATTRIBUTE})*
  XML_START_TAG <{XML_TAG_CONTENTS}>
  XML_END_TAG <\/{XML_TAG_CONTENTS}>
  XML_EMPTY_TAG <{XML_TAG_CONTENTS}\/>
  XML_DECLARATION <\?{XML_TAG_CONTENTS}\?>
  XML_TAG {XML_START_TAG}|{XML_END_TAG}|{XML_EMPTY_TAG}
  XML_COMMENT <!--(.|\n)*-->
  XML {XML_COMMENT}|{XML_TAG}|{XML_DECLARATION}
}

header {
#include <iostream>
#include <sstream>
#include <iomanip>

#include "configuration.hpp"

#define flush_accumulator_withxml() {\
  self.token_p()->set_number(self.nonblanks_read);\
  self_accumulator_flush(QUEX_PREPROC_WITHXML_TEXT);\
  self.nonblanks_read = 0;\
  self.accumulator_size = 0;\
}

}

body {
    /* accumulator_size gives the number of characters stored in the
    accumulator so we know when to flush it. nonblanks_read tells us how many
    of the characters in the accumulator are nonblank. */
    int accumulator_size, nonblanks_read;
    bool report_entities;
}

init {
    self.accumulator_size = 0;
    self.nonblanks_read = 0;
    self.report_entities = true;
}

mode PREPROCESS {

  // Need an upper limit so the lexeme doesn't outgrow the buffer
  \P{White_Space}{1,32}
        {
          if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY) {
            flush_accumulator_withxml();
          }
          self_accumulator_add(Lexeme, LexemeEnd);
          self.accumulator_size += LexemeL;
        }

  // Need an upper limit so the lexeme doesn't outgrow the buffer
  [:inverse(\P{White_Space},[&<]):]{1,32}
        {
          if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY) {
            flush_accumulator_withxml();
          }
          self_accumulator_add(Lexeme, LexemeEnd);
          self.accumulator_size += LexemeL;
          self.nonblanks_read += LexemeL;
        }

  &|<
        {
          if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY) {
            flush_accumulator_withxml();
          }
          self_accumulator_add(Lexeme, LexemeEnd);
          self.accumulator_size += LexemeL;
          self.nonblanks_read += LexemeL;
        }

  {ENTITY}|{CHARREF}
        {
          if (self.report_entities) {
              if (self.accumulator_size > 0) {
                flush_accumulator_withxml();
              }
              self_send1(QUEX_PREPROC_WITHXML_ENTITY, Lexeme);
          } else {
              if (self.accumulator_size + LexemeL > ACCUMULATOR_CAPACITY) {
                flush_accumulator_withxml();
              }
              self_accumulator_add(Lexeme, LexemeEnd);
              self.accumulator_size += LexemeL;
              self.nonblanks_read += LexemeL;
          }
        }

    {XML}
          {
            if (self.accumulator_size > 0) {
              flush_accumulator_withxml();
            }
            self_send1(QUEX_PREPROC_WITHXML_XML, Lexeme);
          }

    <<EOF>>
          {
            if (self.accumulator_size > 0) {
              flush_accumulator_withxml();
            }
            self_send(QUEX_PREPROC_WITHXML_TERMINATION);
          }

  <<FAIL>>
        {
          std::stringstream ss;
          ss << "Encountered invalid character: 0x" << std::hex << *Lexeme;
          throw std::runtime_error(ss.str());
        }
}
